[{"path":"https://mictott.github.io/SpotSweeper/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to SpotSweeper","title":"Contributing to SpotSweeper","text":"outlines propose change SpotSweeper. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://mictott.github.io/SpotSweeper/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to SpotSweeper","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://mictott.github.io/SpotSweeper/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to SpotSweeper","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://mictott.github.io/SpotSweeper/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to SpotSweeper","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"MicTott/SpotSweeper\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://mictott.github.io/SpotSweeper/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to SpotSweeper","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://mictott.github.io/SpotSweeper/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to SpotSweeper","text":"Please note SpotSweeper project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mictott.github.io/SpotSweeper/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 SpotSweeper authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mictott.github.io/SpotSweeper/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with SpotSweeper","title":"Getting help with SpotSweeper","text":"Thank using SpotSweeper! filing issue, things know make process smooth possible parties.","code":""},{"path":"https://mictott.github.io/SpotSweeper/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with SpotSweeper","text":"Start making minimally reproducible example, also known ‘reprex’. may use reprex R package create one, though necessary help. make R-question-asking endeavors easier. Learning use takes 5 10 minutes. tips make minimally reproducible example, see StackOverflow link.","code":""},{"path":"https://mictott.github.io/SpotSweeper/SUPPORT.html","id":"where-to-post-it","dir":"","previous_headings":"","what":"Where to post it?","title":"Getting help with SpotSweeper","text":"Bioconductor help web page gives overview places may help answer question. Bioconductor software related questions, bug reports feature requests, addressed appropriate Bioconductor/SpotSweeper GitHub repository. Follow bug report feature request templates GitHub. package GitHub repository, see next bullet point. Bioconductor software usage questions addressed Bioconductor Support Website. Make sure use appropriate package tag, otherwise package authors get notification. General R questions can posed StackOverflow RStudio Community website especially pertain tidyverse RStudio GUI related products.","code":""},{"path":"https://mictott.github.io/SpotSweeper/SUPPORT.html","id":"issues-or-feature-requests","dir":"","previous_headings":"","what":"Issues or Feature Requests","title":"Getting help with SpotSweeper","text":"opening new issue feature request, sure search issues pull requests ensure one already exist implemented development version. Note. can remove :open search term issues page search open closed issues. See link learn modifying search.","code":""},{"path":"https://mictott.github.io/SpotSweeper/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with SpotSweeper","text":"Bioconductor maintainers limited resources strive responsive possible. Please forget tag appropriate maintainer issue GitHub username (e.g., @username). order make easy possible Bioconductor core developers remediate issue. Provide accurate, brief, reproducible report outlined issue templates. Thank trusting Bioconductor.","code":""},{"path":"https://mictott.github.io/SpotSweeper/articles/getting_started.html","id":"input-data-format","dir":"Articles","previous_headings":"","what":"Input data format","title":"Getting started with 'SpotSweeper'","text":"examples , assume input data provided SpatialExperiment (SPE) object. outputs spot-level outliers artifacts stored colData SPE object.","code":""},{"path":"https://mictott.github.io/SpotSweeper/articles/getting_started.html","id":"spot-level-local-outlier-detection","dir":"Articles","previous_headings":"","what":"Spot-level local outlier detection","title":"Getting started with 'SpotSweeper'","text":"example workflow showing detect visualize local outliers 10X Genomics Visium data. SpotSweeper can run SPE object following code. outputs local_outliers colData SPE object. Selecting data_output=TRUE exports z-transformed QC metrics well. can now visualize local_outliers vs one QC metrics, sum_log2, help escheR package.","code":"library(SpotSweeper)   # load  Maynard et al DLPFC daatset spe <- STexampleData::Visium_humanDLPFC()  # change from gene id to gene names rownames(spe) <- rowData(spe)$gene_name  # show column data before SpotSweeper colnames(colData(spe)) #> [1] \"barcode_id\"   \"sample_id\"    \"in_tissue\"    \"array_row\"    \"array_col\"    #> [6] \"ground_truth\" \"cell_count\"  # drop out-of-tissue spots spe <- spe[, spe$in_tissue == 1] spe <- spe[, !is.na(spe$ground_truth)] # Identifying the mitochondrial transcripts in our SpatialExperiment. is.mito <- rownames(spe)[grepl(\"^MT-\", rownames(spe))]  # Calculating QC metrics for each spot using scuttle spe<- scuttle::addPerCellQCMetrics(spe, subsets=list(Mito=is.mito)) colnames(colData(spe)) #>  [1] \"barcode_id\"            \"sample_id\"             \"in_tissue\"             #>  [4] \"array_row\"             \"array_col\"             \"ground_truth\"          #>  [7] \"cell_count\"            \"sum\"                   \"detected\"              #> [10] \"subsets_Mito_sum\"      \"subsets_Mito_detected\" \"subsets_Mito_percent\"  #> [13] \"total\"  # Identifying local outliers using SpotSweeper spe <- localOutliers(spe,                          metric=\"sum\",                          direction=\"lower\",                          log=TRUE )  spe <- localOutliers(spe,                          metric=\"detected\",                          direction=\"lower\",                          log=TRUE )  spe <- localOutliers(spe,                          metric=\"subsets_Mito_percent\",                          direction=\"higher\",                          log=FALSE )  # combine all outliers into \"local_outliers\" column spe$local_outliers <- as.logical(spe$sum_outliers) |    as.logical(spe$detected_outliers) |    as.logical(spe$subsets_Mito_percent_outliers) library(escheR) library(ggpubr)  # library size p1 <- plotOutliers(spe, metric=\"sum_log2\",               outliers=\"sum_outliers\", point_size=1.1) +   ggtitle(\"Library Size\")  # unique genes p2 <- plotOutliers(spe, metric=\"detected_log2\",               outliers=\"detected_outliers\", point_size=1.1) +   ggtitle(\"Unique Genes\")  # mitochondrial percent p3 <- plotOutliers(spe, metric=\"subsets_Mito_percent\",               outliers=\"subsets_Mito_percent_outliers\", point_size=1.1) +   ggtitle(\"Mitochondrial Percent\")  # all local outliers p4 <- plotOutliers(spe, metric=\"sum_log2\",               outliers=\"local_outliers\", point_size=1.1, stroke=0.75) +   ggtitle(\"All Local Outliers\")  # plot plot_list <- list(p1, p2, p3, p4) ggarrange(   plotlist = plot_list,   ncol = 2, nrow = 2,   common.legend = FALSE )"},{"path":"https://mictott.github.io/SpotSweeper/articles/getting_started.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Getting started with 'SpotSweeper'","text":"","code":"utils::sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggpubr_0.6.0                escheR_1.2.0                #>  [3] ggplot2_3.5.0               STexampleData_1.10.1        #>  [5] SpatialExperiment_1.12.0    SingleCellExperiment_1.24.0 #>  [7] SummarizedExperiment_1.32.0 Biobase_2.62.0              #>  [9] GenomicRanges_1.54.1        GenomeInfoDb_1.38.8         #> [11] IRanges_2.36.0              S4Vectors_0.40.2            #> [13] MatrixGenerics_1.14.0       matrixStats_1.2.0           #> [15] ExperimentHub_2.10.0        AnnotationHub_3.10.0        #> [17] BiocFileCache_2.10.1        dbplyr_2.5.0                #> [19] BiocGenerics_0.48.1         SpotSweeper_0.99.1          #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.2                     bitops_1.0-7                  #>   [3] rlang_1.1.3                   magrittr_2.0.3                #>   [5] compiler_4.3.3                RSQLite_2.3.5                 #>   [7] DelayedMatrixStats_1.24.0     png_0.1-8                     #>   [9] systemfonts_1.0.6             vctrs_0.6.5                   #>  [11] pkgconfig_2.0.3               crayon_1.5.2                  #>  [13] fastmap_1.1.1                 backports_1.4.1               #>  [15] magick_2.8.3                  XVector_0.42.0                #>  [17] ellipsis_0.3.2                labeling_0.4.3                #>  [19] scuttle_1.12.0                utf8_1.2.4                    #>  [21] promises_1.2.1                rmarkdown_2.26                #>  [23] ragg_1.3.0                    purrr_1.0.2                   #>  [25] bit_4.0.5                     xfun_0.42                     #>  [27] beachmat_2.18.1               zlibbioc_1.48.2               #>  [29] cachem_1.0.8                  jsonlite_1.8.8                #>  [31] blob_1.2.4                    highr_0.10                    #>  [33] later_1.3.2                   DelayedArray_0.28.0           #>  [35] BiocParallel_1.36.0           interactiveDisplayBase_1.40.0 #>  [37] broom_1.0.5                   parallel_4.3.3                #>  [39] R6_2.5.1                      bslib_0.6.1                   #>  [41] car_3.1-2                     jquerylib_0.1.4               #>  [43] Rcpp_1.0.12                   knitr_1.45                    #>  [45] httpuv_1.6.14                 Matrix_1.6-5                  #>  [47] tidyselect_1.2.1              abind_1.4-5                   #>  [49] yaml_2.3.8                    codetools_0.2-19              #>  [51] curl_5.2.1                    lattice_0.22-5                #>  [53] tibble_3.2.1                  withr_3.0.0                   #>  [55] KEGGREST_1.42.0               shiny_1.8.0                   #>  [57] evaluate_0.23                 desc_1.4.3                    #>  [59] Biostrings_2.70.3             pillar_1.9.0                  #>  [61] BiocManager_1.30.22           filelock_1.0.3                #>  [63] carData_3.0-5                 generics_0.1.3                #>  [65] RCurl_1.98-1.14               BiocVersion_3.18.1            #>  [67] sparseMatrixStats_1.14.0      munsell_0.5.0                 #>  [69] scales_1.3.0                  xtable_1.8-4                  #>  [71] glue_1.7.0                    tools_4.3.3                   #>  [73] BiocNeighbors_1.20.2          ggsignif_0.6.4                #>  [75] fs_1.6.3                      cowplot_1.1.3                 #>  [77] grid_4.3.3                    tidyr_1.3.1                   #>  [79] AnnotationDbi_1.64.1          colorspace_2.1-0              #>  [81] GenomeInfoDbData_1.2.11       cli_3.6.2                     #>  [83] rappdirs_0.3.3                textshaping_0.3.7             #>  [85] fansi_1.0.6                   viridisLite_0.4.2             #>  [87] S4Arrays_1.2.1                dplyr_1.1.4                   #>  [89] gtable_0.3.4                  rstatix_0.7.2                 #>  [91] sass_0.4.9                    digest_0.6.35                 #>  [93] SparseArray_1.2.4             farver_2.1.1                  #>  [95] rjson_0.2.21                  memoise_2.0.1                 #>  [97] htmltools_0.5.7               pkgdown_2.0.7                 #>  [99] lifecycle_1.0.4               httr_1.4.7                    #> [101] mime_0.12                     bit64_4.0.5                   #> [103] MASS_7.3-60.0.1"},{"path":"https://mictott.github.io/SpotSweeper/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Totty. Author, maintainer.","code":""},{"path":"https://mictott.github.io/SpotSweeper/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"MicTott (2024). SpotSweeper: Spot artifact-level quality control spatially-resolved transcriptomics data. doi:10.18129/B9.bioc.SpotSweeper, https://github.com/MicTott/SpotSweeper/SpotSweeper - R package version 0.99.1, http://www.bioconductor.org/packages/SpotSweeper. MicTott (2024). “SpotSweeper: Spot artifact-level quality control spatially-resolved transcriptomics data.” bioRxiv. doi:10.1101/TODO, https://www.biorxiv.org/content/10.1101/TODO.","code":"@Manual{,   title = {SpotSweeper: Spot and artifact-level quality control for spatially-resolved transcriptomics data},   author = {{MicTott}},   year = {2024},   url = {http://www.bioconductor.org/packages/SpotSweeper},   note = {https://github.com/MicTott/SpotSweeper/SpotSweeper - R package version 0.99.1},   doi = {10.18129/B9.bioc.SpotSweeper}, } @Article{,   title = {SpotSweeper: Spot and artifact-level quality control for spatially-resolved transcriptomics data},   author = {{MicTott}},   year = {2024},   journal = {bioRxiv},   doi = {10.1101/TODO},   url = {https://www.biorxiv.org/content/10.1101/TODO}, }"},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"spotsweeper","dir":"","previous_headings":"","what":"Spatially-aware quality control for spatial transcriptomics","title":"Spatially-aware quality control for spatial transcriptomics","text":"SpotSweeper package developed spatially-aware quality control (QC) methods detection, visualization, removal local outliers large artifacts spot-based spatial transcriptomics data, 10x Genomics Visium, using standard QC metrics.","code":""},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Spatially-aware quality control for spatial transcriptomics","text":"Currently, way install SpotSweeper downloading development version can installed GitHub using following: accepted Bioconductor, SpotSweeper installable using:","code":"if (!require(\"devtools\")) install.packages(\"devtools\") remotes::install_github(\"MicTott/SpotSweeper\") } if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"SpotSweeper\")"},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"tutorial-in-progress","dir":"","previous_headings":"","what":"Tutorial (in progress)","title":"Spatially-aware quality control for spatial transcriptomics","text":"detailed tutorial available package vignette Bioconductor. direct link tutorial / package vignette available .","code":""},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"input-data-format","dir":"","previous_headings":"","what":"Input data format","title":"Spatially-aware quality control for spatial transcriptomics","text":"examples , assume input data provided SpatialExperiment (SPE) object. outputs spot-level outliers artifacts stored colData SPE object.","code":""},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"spot-level-local-outlier-detection","dir":"","previous_headings":"","what":"Spot-level local outlier detection","title":"Spatially-aware quality control for spatial transcriptomics","text":"example workflow showing detect visualize local outliers 10X Genomics Visium data. SpotSweeper can run SPE object following code. outputs local_outliers colData SPE object. Selecting data_output=TRUE exports z-transformed QC metrics well. can now visualize local_outliers vs one QC metrics, sum_log2, help escheR package.","code":"library(SpotSweeper)   # load  Maynard et al DLPFC daatset spe <- STexampleData::Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> loading from cache  # change from gene id to gene names rownames(spe) <- rowData(spe)$gene_name  # show column data before SpotSweeper colnames(colData(spe)) #> [1] \"barcode_id\"   \"sample_id\"    \"in_tissue\"    \"array_row\"    \"array_col\"    #> [6] \"ground_truth\" \"cell_count\"  # drop out-of-tissue spots spe <- spe[, spe$in_tissue == 1] spe <- spe[, !is.na(spe$ground_truth)] # Identifying the mitochondrial transcripts in our SpatialExperiment. is.mito <- rownames(spe)[grepl(\"^MT-\", rownames(spe))]  # Calculating QC metrics for each spot using scuttle spe<- scuttle::addPerCellQCMetrics(spe, subsets=list(Mito=is.mito)) colnames(colData(spe)) #>  [1] \"barcode_id\"            \"sample_id\"             \"in_tissue\"             #>  [4] \"array_row\"             \"array_col\"             \"ground_truth\"          #>  [7] \"cell_count\"            \"sum\"                   \"detected\"              #> [10] \"subsets_Mito_sum\"      \"subsets_Mito_detected\" \"subsets_Mito_percent\"  #> [13] \"total\"  # Identifying local outliers using SpotSweeper spe <- localOutliers(spe,                          metric=\"sum\",                          direction=\"lower\",                          log=TRUE )  spe <- localOutliers(spe,                          metric=\"detected\",                          direction=\"lower\",                          log=TRUE )  spe <- localOutliers(spe,                          metric=\"subsets_Mito_percent\",                          direction=\"higher\",                          log=FALSE )  # combine all outliers into \"local_outliers\" column spe$local_outliers <- as.logical(spe$sum_outliers) |    as.logical(spe$detected_outliers) |    as.logical(spe$subsets_Mito_percent_outliers) library(escheR) #> Loading required package: ggplot2 library(ggpubr)  # library size p1 <- plotOutliers(spe, metric=\"sum_log2\",               outliers=\"sum_outliers\", point_size=1.1) +   ggtitle(\"Library Size\")  # unique genes p2 <- plotOutliers(spe, metric=\"detected_log2\",               outliers=\"detected_outliers\", point_size=1.1) +   ggtitle(\"Unique Genes\")  # mitochondrial percent p3 <- plotOutliers(spe, metric=\"subsets_Mito_percent\",               outliers=\"subsets_Mito_percent_outliers\", point_size=1.1) +   ggtitle(\"Mitochondrial Percent\")  # all local outliers p4 <- plotOutliers(spe, metric=\"sum_log2\",               outliers=\"local_outliers\", point_size=1.1, stroke=0.75) +   ggtitle(\"All Local Outliers\")  # plot plot_list <- list(p1, p2, p3, p4) ggarrange(   plotlist = plot_list,   ncol = 2, nrow = 2,   common.legend = FALSE )"},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"artifact-detection","dir":"","previous_headings":"","what":"Artifact detection","title":"Spatially-aware quality control for spatial transcriptomics","text":"Large artifacts can visualized detected calculating local variance standard QC metrics, mitochondrial ratio.","code":"# load in DLPFC sample with hangnail artifact data(DLPFC_artifact) spe <- DLPFC_artifact  # inspect colData before artifact detection colnames(colData(spe)) #>  [1] \"sample_id\"          \"in_tissue\"          \"array_row\"          #>  [4] \"array_col\"          \"key\"                \"sum_umi\"            #>  [7] \"sum_gene\"           \"expr_chrM\"          \"expr_chrM_ratio\"    #> [10] \"ManualAnnotation\"   \"subject\"            \"region\"             #> [13] \"sex\"                \"age\"                \"diagnosis\"          #> [16] \"sample_id_complete\" \"count\"              \"sizeFactor\"  # find artifacts using  spe <- findArtifacts(spe,                       mito_percent=\"expr_chrM_ratio\",                      mito_sum=\"expr_chrM\",                      n_rings=5,                      name=\"artifact\"                     )  # check that \"artifact\" is now in colData colnames(colData(spe)) #>  [1] \"sample_id\"            \"in_tissue\"            \"array_row\"            #>  [4] \"array_col\"            \"key\"                  \"sum_umi\"              #>  [7] \"sum_gene\"             \"expr_chrM\"            \"expr_chrM_ratio\"      #> [10] \"ManualAnnotation\"     \"subject\"              \"region\"               #> [13] \"sex\"                  \"age\"                  \"diagnosis\"            #> [16] \"sample_id_complete\"   \"count\"                \"sizeFactor\"           #> [19] \"expr_chrM_ratio_log2\" \"expr_chrM_log2\"       \"coords\"               #> [22] \"k6\"                   \"k18\"                  \"k36\"                  #> [25] \"k60\"                  \"k90\"                  \"Kmeans\"               #> [28] \"artifact\" # plotting using escheR p1 <- make_escheR(spe) |>    add_fill(var = \"expr_chrM_ratio\", point_size=1.25)  p2 <- make_escheR(spe) |>    add_fill(var = \"expr_chrM\", point_size=1.25)  p3 <- make_escheR(spe) |>    add_fill(var = \"k18\", point_size=1.25)     p4 <- make_escheR(spe) |>    add_fill(var = \"artifact\", point_size=1.25) +   scale_fill_manual(     name = \"\",     values = c(       \"TRUE\" = \"red\",       \"FALSE\" = \"grey\")   ) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale.  plot_list <- list(p1, p2, p3, p4) ggarrange(   plotlist = plot_list,   ncol = 2, nrow = 2,   common.legend = FALSE )"},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Spatially-aware quality control for spatial transcriptomics","text":"Please look preprint describing SpotSweeper bioRxiv. , please cite package follows:","code":"citation(\"SpotSweeper\")"},{"path":"https://mictott.github.io/SpotSweeper/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Spatially-aware quality control for spatial transcriptomics","text":"","code":"* Continuous code testing is possible thanks to [GitHub actions](https://www.tidyverse.org/blog/2020/04/usethis-1-6-0/)  through `r BiocStyle::Biocpkg('biocthis')`. * The [documentation website](http://MicTott.github.io/SpotSweeper) is automatically updated thanks to `r BiocStyle::CRANpkg('pkgdown')`. * The code is styled automatically thanks to `r BiocStyle::CRANpkg('styler')`. * The documentation is formatted thanks to `r BiocStyle::CRANpkg('devtools')` and `r BiocStyle::CRANpkg('roxygen2')`.  This package was developed using `r BiocStyle::Biocpkg('biocthis')`."},{"path":"https://mictott.github.io/SpotSweeper/reference/DLPFC_artifact.html","id":null,"dir":"Reference","previous_headings":"","what":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","title":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","text":"DLPFC_artifact dataset SpatialExperiment object containing single-sample subset human dorsolateral prefrontal cortex (DLPFC) dataset Hukki-Myers et al. 2023. particular sample (\"Br2743_ant\") included demonstrate identification removal technical artifacts within spatial transcriptomics data. dataset serves example artifact detection using 'SpotSweeper' workflow.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/DLPFC_artifact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","text":"","code":"data(DLPFC_artifact)"},{"path":"https://mictott.github.io/SpotSweeper/reference/DLPFC_artifact.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","text":"SpatialExperiment object.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/DLPFC_artifact.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","text":"spatialLIBD","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/DLPFC_artifact.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","text":"Hukki-Myers et al. (2023) bioRxiv (bioRxiv)","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/DLPFC_artifact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"human DLPFC dataset with a technical artifact (hangnail). — DLPFC_artifact","text":"","code":"data(DLPFC_artifact)"},{"path":"https://mictott.github.io/SpotSweeper/reference/findArtifacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and annotate artifacts in spatial transcriptomics data — findArtifacts","title":"Identify and annotate artifacts in spatial transcriptomics data — findArtifacts","text":"function identifies annotates potential artifacts spatial transcriptomics data. Artifacts detected based local mito variance, results added original SpatialExperiment (sce) object.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/findArtifacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and annotate artifacts in spatial transcriptomics data — findArtifacts","text":"","code":"findArtifacts(   spe,   mito_percent = \"expr_chrM_ratio\",   mito_sum = \"expr_chrM\",   samples = \"sample_id\",   n_rings = 5,   n_cores = 1,   log2 = TRUE,   name = \"artifact\",   var_output = TRUE )"},{"path":"https://mictott.github.io/SpotSweeper/reference/findArtifacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and annotate artifacts in spatial transcriptomics data — findArtifacts","text":"spe SingleCellExperiment object. mito_percent column name representing mitochondrial percent. Default \"expr_chrM_ratio\". mito_sum column name representing sum mitochondrial expression. Default \"expr_chrM\". samples column name representing sample IDs. Default \"sample_id\". n_rings number rings local mito variance calculation. Default 5. n_cores Number cores use parallel processing. Default 1. log2 Logical, indicating whether log2 transform specified features. Default TRUE. name Prefix local variance column names. Default \"artifact\". var_output Logical, indicating whether include local variances output. Default TRUE.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/findArtifacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and annotate artifacts in spatial transcriptomics data — findArtifacts","text":"Returns modified SingleCellExperiment object artifact annotations.","code":""},{"path":[]},{"path":"https://mictott.github.io/SpotSweeper/reference/findArtifacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and annotate artifacts in spatial transcriptomics data — findArtifacts","text":"","code":"library(SpotSweeper) library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians  # load example data spe <- STexampleData::Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache  # change from gene id to gene names rownames(spe) <- rowData(spe)$gene_name  # show column data before SpotSweepR colnames(colData(spe)) #> [1] \"barcode_id\"   \"sample_id\"    \"in_tissue\"    \"array_row\"    \"array_col\"    #> [6] \"ground_truth\" \"cell_count\"    # drop out-of-tissue spots spe <- spe[, spe$in_tissue == 1] spe <- spe[, !is.na(spe$ground_truth)]  # Identifying the mitochondrial transcripts in our SpatialExperiment. is.mito <- rownames(spe)[grepl(\"^MT-\", rownames(spe))]  # Calculating QC metrics for each spot using scuttle spe<- scuttle::addPerCellQCMetrics(spe, subsets=list(Mito=is.mito)) colnames(colData(spe)) #>  [1] \"barcode_id\"            \"sample_id\"             \"in_tissue\"             #>  [4] \"array_row\"             \"array_col\"             \"ground_truth\"          #>  [7] \"cell_count\"            \"sum\"                   \"detected\"              #> [10] \"subsets_Mito_sum\"      \"subsets_Mito_detected\" \"subsets_Mito_percent\"  #> [13] \"total\"                  # find rtifacts spe <- findArtifacts(spe,                      mito_percent=\"subsets_Mito_percent\",                      mito_sum=\"subsets_Mito_sum\",                      n_rings=5,                      name=\"artifact\"                    ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'j' in selecting a method for function '[': comparison (==) is possible only for atomic and list types"},{"path":"https://mictott.github.io/SpotSweeper/reference/localOutliers.html","id":null,"dir":"Reference","previous_headings":"","what":"localOutliers Function — localOutliers","title":"localOutliers Function — localOutliers","text":"function detects local outliers spatial transcriptomics data based standard quality control metrics, library size, unique genes, mitochondrial ratio. Local outliers defined spots low/high quality metrics compared surrounding neighbors, based modified z-score statistic.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/localOutliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"localOutliers Function — localOutliers","text":"","code":"localOutliers(   spe,   metric = \"detected\",   direction = \"lower\",   n_neighbors = 36,   samples = \"sample_id\",   log = TRUE,   cutoff = 3 )"},{"path":"https://mictott.github.io/SpotSweeper/reference/localOutliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"localOutliers Function — localOutliers","text":"spe SpatialExperiment object metric colData QC metric use outlier detection direction Direction outlier detection (higher, lower, ) n_neighbors Number nearest neighbors use outlier detection samples Column name colData use sample IDs log Logical indicating whether log2 transform features (default TRUE) cutoff Cutoff outlier detection (default 3)","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/localOutliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"localOutliers Function — localOutliers","text":"SpatialExperiment object updated colData containing outputs","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/localOutliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"localOutliers Function — localOutliers","text":"","code":"library(SpotSweeper) library(SpatialExperiment)  # load example data spe <- STexampleData::Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> loading from cache  # change from gene id to gene names rownames(spe) <- rowData(spe)$gene_name  # drop out-of-tissue spots spe <- spe[, spe$in_tissue == 1] spe <- spe[, !is.na(spe$ground_truth)]  # Identifying the mitochondrial transcripts in our SpatialExperiment. is.mito <- rownames(spe)[grepl(\"^MT-\", rownames(spe))]  # Calculating QC features for each spot using scuttle spe<- scuttle::addPerCellQC(spe, subsets=list(Mito=is.mito))  spe<- localOutliers(spe,                     metric=\"detected\",                     direction=\"lower\"                     )"},{"path":"https://mictott.github.io/SpotSweeper/reference/localVariance.html","id":null,"dir":"Reference","previous_headings":"","what":"localVariance Function — localVariance","title":"localVariance Function — localVariance","text":"function calculates local variance based kNN.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/localVariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"localVariance Function — localVariance","text":"","code":"localVariance(   spe,   n_neighbors = 36,   features = c(\"expr_chrM_ratio\"),   samples = \"sample_id\",   log2 = FALSE,   n_cores = 1,   name = NULL )"},{"path":"https://mictott.github.io/SpotSweeper/reference/localVariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"localVariance Function — localVariance","text":"spe SpatialExperiment object following columns colData: sample_id, sum_umi, sum_gene n_neighbors Number nearest neighbors use variance calculation features Features use variance calculation samples Column colData use sample ID log2 Whether log2 transform features n_cores Number cores use parallelization name Name new column add colData","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/localVariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"localVariance Function — localVariance","text":"SpatialExperiment object feature variance added colData","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/localVariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"localVariance Function — localVariance","text":"","code":"library(SpotSweeper) library(SpatialExperiment)  # load example data spe <- STexampleData::Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> loading from cache  # change from gene id to gene names rownames(spe) <- rowData(spe)$gene_name  # show column data before SpotSweepR colnames(colData(spe)) #> [1] \"barcode_id\"   \"sample_id\"    \"in_tissue\"    \"array_row\"    \"array_col\"    #> [6] \"ground_truth\" \"cell_count\"    # drop out-of-tissue spots spe <- spe[, spe$in_tissue == 1] spe <- spe[, !is.na(spe$ground_truth)]  # Identifying the mitochondrial transcripts in our SpatialExperiment. is.mito <- rownames(spe)[grepl(\"^MT-\", rownames(spe))]  # Calculating QC metrics for each spot using scuttle spe<- scuttle::addPerCellQCMetrics(spe, subsets=list(Mito=is.mito)) colnames(colData(spe)) #>  [1] \"barcode_id\"            \"sample_id\"             \"in_tissue\"             #>  [4] \"array_row\"             \"array_col\"             \"ground_truth\"          #>  [7] \"cell_count\"            \"sum\"                   \"detected\"              #> [10] \"subsets_Mito_sum\"      \"subsets_Mito_detected\" \"subsets_Mito_percent\"  #> [13] \"total\"                  spe <- localVariance(spe,                      features = \"subsets_Mito_percent\",                      n_neighbors=36,                      name=\"local_mito_variance_k36\"                      ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'j' in selecting a method for function '[': comparison (==) is possible only for atomic and list types"},{"path":"https://mictott.github.io/SpotSweeper/reference/modified_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified Z-score Function — modified_z","title":"Modified Z-score Function — modified_z","text":"function calculates returns standardized (z-score like) values based Median Absolute Deviation (MAD) method. robust method detect outliers data might normally distributed. function replication spatialEco::outliers() package longer available CRAN October 2023.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/modified_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified Z-score Function — modified_z","text":"","code":"modified_z(x, s = 1.4826)"},{"path":"https://mictott.github.io/SpotSweeper/reference/modified_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified Z-score Function — modified_z","text":"x numeric vector outliers need detected. s constant used MAD calculation, default 1.4826.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/modified_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified Z-score Function — modified_z","text":"numeric vector standardized values. Outliers typically values far zero.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/modified_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified Z-score Function — modified_z","text":"","code":"data <- c(1, 2, 3, 4, 5, 100) modified_z(data) #> [1] -0.758240 -0.454944 -0.151648  0.151648  0.454944 29.268065"},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Outliers for a Single Sample in a SingleCellExperiment — plotOutliers","title":"Plot Outliers for a Single Sample in a SingleCellExperiment — plotOutliers","text":"function generates plot specified sample within SingleCellExperiment object, highlighting outliers based specified metric. plot visualizes metric interest indicates outliers distinct color.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Outliers for a Single Sample in a SingleCellExperiment — plotOutliers","text":"","code":"plotOutliers(   spe,   sample_id = \"sample_id\",   sample = unique(spe$sample_id)[1],   metric = \"detected\",   outliers = \"local_outliers\",   point_size = 1,   colors = c(\"white\", \"black\"),   stroke = 1 )"},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Outliers for a Single Sample in a SingleCellExperiment — plotOutliers","text":"spe SpatialExperiment object containing data plotted. sample_id character string specifying column name colData(spe) contains unique sample identifiers. Default \"sample_id\". sample character string numeric value specifying sample plotted. default, plots first unique sample found spe$sample_id. metric character string specifying metric visualized plot. metric column name colData(spe). outliers character string specifying column name colData(spe) indicates whether data point considered outlier. Default \"local_outliers\". colors character vector specifying colors used gradient scale. length 2, gradient single color gradient. stroke numeric value specifying border thickness outlier points. Default 1.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Outliers for a Single Sample in a SingleCellExperiment — plotOutliers","text":"function returns plot object created make_escheR modified additional layers visualizing specified metric outliers. plot explicitly printed function printed caller.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Outliers for a Single Sample in a SingleCellExperiment — plotOutliers","text":"","code":"plot <- plotOutliers(spe) #> Error in eval(expr, envir, enclos): object 'spe' not found plot #> new(\"standardGeneric\", .Data = function (x, y, ...)  #> standardGeneric(\"plot\"), generic = \"plot\", package = \"base\",  #>     group = list(), valueClass = character(0), signature = c(\"x\",  #>     \"y\"), default = new(\"derivedDefaultMethod\", .Data = function (x,  #>         y, ...)  #>     UseMethod(\"plot\"), target = new(\"signature\", .Data = \"ANY\",  #>         names = \"x\", package = \"methods\"), defined = new(\"signature\",  #>         .Data = \"ANY\", names = \"x\", package = \"methods\"), generic = \"plot\"),  #>     skeleton = (new(\"derivedDefaultMethod\", .Data = function (x,  #>         y, ...)  #>     UseMethod(\"plot\"), target = new(\"signature\", .Data = \"ANY\",  #>         names = \"x\", package = \"methods\"), defined = new(\"signature\",  #>         .Data = \"ANY\", names = \"x\", package = \"methods\"), generic = \"plot\"))(x,  #>         y, ...)) #> <environment: 0x55cd11cd7be0> #> attr(,\"generic\") #> [1] \"plot\" #> attr(,\"generic\")attr(,\"package\") #> [1] \"base\" #> attr(,\"package\") #> [1] \"base\" #> attr(,\"group\") #> list() #> attr(,\"valueClass\") #> character(0) #> attr(,\"signature\") #> [1] \"x\" \"y\" #> attr(,\"default\") #> Method Definition (Class \"derivedDefaultMethod\"): #>  #> function (x, y, ...)  #> UseMethod(\"plot\") #> <bytecode: 0x55cd11ca6270> #> <environment: namespace:base> #>  #> Signatures: #>         x     #> target  \"ANY\" #> defined \"ANY\" #> attr(,\"skeleton\") #> (new(\"derivedDefaultMethod\", .Data = function (x, y, ...)  #> UseMethod(\"plot\"), target = new(\"signature\", .Data = \"ANY\", names = \"x\",  #>     package = \"methods\"), defined = new(\"signature\", .Data = \"ANY\",  #>     names = \"x\", package = \"methods\"), generic = \"plot\"))(x,  #>     y, ...) #> attr(,\"class\") #> [1] \"standardGeneric\" #> attr(,\"class\")attr(,\"package\") #> [1] \"methods\""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliersPDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Outlier Metrics to PDF — plotOutliersPDF","title":"Plot Outlier Metrics to PDF — plotOutliersPDF","text":"function generates PDF file containing plots sample SpatialExperiment object, highlighting outliers based specified metrics. plot visualizes outlier metrics single sample, allowing easy comparison analysis across samples.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliersPDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Outlier Metrics to PDF — plotOutliersPDF","text":"","code":"plotOutliersPDF(   spe,   sample_id = \"sample_id\",   metric = \"detected\",   outliers = \"local_outliers\",   colors = c(\"white\", \"black\"),   stroke = 1,   width = 5,   height = 5,   fname )"},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliersPDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Outlier Metrics to PDF — plotOutliersPDF","text":"spe SpatialExperiment object containing data plotted. sample_id character string specifying column name colData(spe) contains unique sample identifiers. Default \"sample_id\". metric character string specifying metric visualized plot. metric column name colData(spe). outliers character string specifying column name colData(spe) indicates whether data point considered outlier. Default \"local_outliers\". colors character vector specifying colors used gradient scale. length 2, gradient single color gradient. stroke numeric value specifying border thickness outlier points. Default 1. width numeric value indicating width plot. Default 5. height numeric value indicating height plot. Default 5. fname character string specifying path name output PDF file.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliersPDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Outlier Metrics to PDF — plotOutliersPDF","text":"Invisible NULL. function's primary effect creation PDF file specified location.","code":""},{"path":"https://mictott.github.io/SpotSweeper/reference/plotOutliersPDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Outlier Metrics to PDF — plotOutliersPDF","text":"","code":"plotOutliersPDF(spe, fname=\"outliers_visualization.pdf\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'colData': object 'spe' not found"},{"path":"https://mictott.github.io/SpotSweeper/news/index.html","id":"spotsweeper-0990","dir":"Changelog","previous_headings":"","what":"SpotSweeper 0.99.0","title":"SpotSweeper 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package. SIGNIFICANT USER-VISIBLE CHANGES main changes function foo() parameter param. BUG FIXES bug fixes. See details http://bioconductor.org/developers/package-guidelines/#news.","code":""}]
